import logging
import os
from telegram import (Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto)
from telegram.ext import (Application, CommandHandler, MessageHandler, filters, CallbackContext, ConversationHandler, CallbackQueryHandler)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
CHANNEL_ID = os.getenv("CHANNEL_ID")

# –≠—Ç–∞–ø—ã ConversationHandler
PHOTO, TEXT, LINK, BUDGET, CONFIRM, EDIT, EDIT_PARAM = range(7)

user_data_store = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã:")
    return PHOTO

async def handle_photo(update: Update, context: CallbackContext):
    user_data_store[update.effective_chat.id] = {"photo": update.message.photo[-1].file_id}
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç:")
    return TEXT

async def handle_text(update: Update, context: CallbackContext):
    user_data_store[update.effective_chat.id]["text"] = update.message.text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É:")
    return LINK

async def handle_link(update: Update, context: CallbackContext):
    user_data_store[update.effective_chat.id]["link"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏ –±—é–¥–∂–µ—Ç:")
    return BUDGET

async def handle_budget(update: Update, context: CallbackContext):
    user_data_store[update.effective_chat.id]["budget"] = update.message.text

    data = user_data_store[update.effective_chat.id]
    caption = f"{data['text']}\n\nüîó {data['link']}\nüí∞ –ë—é–¥–∂–µ—Ç: {data['budget']}"

    keyboard = [
        [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="submit"),
         InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit"),
         InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_photo(photo=data['photo'], caption=caption, reply_markup=reply_markup)
    return CONFIRM

async def confirm_choice(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    choice = query.data

    user_id = query.from_user.id
    data = user_data_store.get(user_id)

    if choice == "submit":
        caption = f"{data['text']}\n\nüîó {data['link']}\nüí∞ –ë—é–¥–∂–µ—Ç: {data['budget']}"
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="approve"),
             InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await context.bot.send_photo(chat_id=ADMIN_ID, photo=data['photo'], caption=caption, reply_markup=reply_markup)
        await query.edit_message_caption(caption="–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
        return ConversationHandler.END

    elif choice == "edit":
        keyboard = [
            [InlineKeyboardButton("–§–æ—Ç–æ", callback_data="edit_photo"),
             InlineKeyboardButton("–¢–µ–∫—Å—Ç", callback_data="edit_text")],
            [InlineKeyboardButton("–°—Å—ã–ª–∫–∞", callback_data="edit_link"),
             InlineKeyboardButton("–ë—é–¥–∂–µ—Ç", callback_data="edit_budget")],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="cancel"),
             InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save")]
        ]
        await query.edit_message_caption(caption="–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=InlineKeyboardMarkup(keyboard))
        return EDIT

    elif choice == "cancel":
        await query.edit_message_caption(caption="–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        user_data_store.pop(user_id, None)
        return ConversationHandler.END

async def handle_edit_param(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    context.user_data['edit_target'] = query.data.split("_")[1]  # photo/text/link/budget
    await query.edit_message_caption(caption=f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è: {context.user_data['edit_target']}")
    return EDIT_PARAM

async def save_edit(update: Update, context: CallbackContext):
    param = context.user_data.get('edit_target')
    value = update.message.text or (update.message.photo[-1].file_id if update.message.photo else None)
    if param and value:
        user_data_store[update.effective_chat.id][param] = value

    data = user_data_store[update.effective_chat.id]
    caption = f"{data['text']}\n\nüîó {data['link']}\nüí∞ –ë—é–¥–∂–µ—Ç: {data['budget']}"
    keyboard = [
        [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="submit"),
         InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit"),
         InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="cancel")]
    ]
    await update.message.reply_photo(photo=data['photo'], caption=caption, reply_markup=InlineKeyboardMarkup(keyboard))
    return CONFIRM

async def admin_decision(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    choice = query.data

    if choice == "approve":
        await context.bot.send_photo(chat_id=CHANNEL_ID, photo=query.message.photo[-1].file_id, caption=query.message.caption)
        await query.edit_message_caption(caption="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ")

    elif choice == "reject":
        await query.edit_message_caption(caption="‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")

async def cancel(update: Update, context: CallbackContext):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫
async def main():
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            PHOTO: [MessageHandler(filters.PHOTO, handle_photo)],
            TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text)],
            LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_link)],
            BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_budget)],
            CONFIRM: [CallbackQueryHandler(confirm_choice, pattern="^(submit|edit|cancel)$")],
            EDIT: [CallbackQueryHandler(handle_edit_param, pattern="^edit_"), CallbackQueryHandler(confirm_choice, pattern="^(cancel|save)$")],
            EDIT_PARAM: [MessageHandler(filters.TEXT | filters.PHOTO, save_edit)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )

    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(admin_decision, pattern="^(approve|reject)$"))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.get_event_loop().run_until_complete(main())









