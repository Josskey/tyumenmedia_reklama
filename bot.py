import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes, ConversationHandler

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —à–∞–≥–æ–≤
PHOTO, TEXT, LINK, BUDGET, PREVIEW, EDIT_SELECT, EDIT_PHOTO, EDIT_TEXT, EDIT_LINK, EDIT_BUDGET = range(10)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞—è–≤–æ–∫
user_data_storage = {}
admin_id = 987540995  # –¢–≤–æ–π Telegram ID
channel_id = "@tyumenmedia"

logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã.")
    return PHOTO

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_storage[update.effective_chat.id] = {
        "photo": update.message.photo[-1].file_id
    }
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
    return TEXT

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_storage[update.effective_chat.id]["text"] = update.message.text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É.")
    return LINK

async def handle_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_storage[update.effective_chat.id]["link"] = update.message.text
    await update.message.reply_text("–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ ‚Äî —É–∫–∞–∂–∏ –±—é–¥–∂–µ—Ç –≤ —Ä—É–±–ª—è—Ö.")
    return BUDGET

async def handle_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_storage[update.effective_chat.id]["budget"] = update.message.text
    return await send_preview(update, context)

async def send_preview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = user_data_storage.get(update.effective_chat.id)
    if not data:
        return ConversationHandler.END

    caption = f"{data['text']}\n\nüîó {data['link']}\nüí∞ –ë—é–¥–∂–µ—Ç: {data['budget']} ‚ÇΩ"
    buttons = [
        [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="submit")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit"), InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="delete")]
    ]
    await context.bot.send_photo(chat_id=update.effective_chat.id, photo=data['photo'], caption=caption, reply_markup=InlineKeyboardMarkup(buttons))
    return PREVIEW

async def handle_preview_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data
    user_id = query.from_user.id

    if action == "submit":
        data = user_data_storage.get(user_id)
        caption = f"{data['text']}\n\nüîó {data['link']}\nüí∞ –ë—é–¥–∂–µ—Ç: {data['budget']} ‚ÇΩ"
        buttons = [
            [InlineKeyboardButton("üì¢ –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"approve_{user_id}"),
             InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")]
        ]
        await context.bot.send_photo(chat_id=admin_id, photo=data['photo'], caption=caption, reply_markup=InlineKeyboardMarkup(buttons))
        await query.edit_message_text("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
        return ConversationHandler.END

    elif action == "edit":
        buttons = [
            [InlineKeyboardButton("–§–æ—Ç–æ", callback_data="edit_photo"),
             InlineKeyboardButton("–¢–µ–∫—Å—Ç", callback_data="edit_text")],
            [InlineKeyboardButton("–°—Å—ã–ª–∫—É", callback_data="edit_link"),
             InlineKeyboardButton("–ë—é–¥–∂–µ—Ç", callback_data="edit_budget")],
            [InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_edit")]
        ]
        await query.edit_message_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=InlineKeyboardMarkup(buttons))
        return EDIT_SELECT

    elif action == "delete":
        user_data_storage.pop(user_id, None)
        await query.edit_message_text("–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
        return ConversationHandler.END

async def handle_edit_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    choice = query.data

    if choice == "edit_photo":
        await query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:")
        return EDIT_PHOTO
    elif choice == "edit_text":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:")
        return EDIT_TEXT
    elif choice == "edit_link":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É:")
        return EDIT_LINK
    elif choice == "edit_budget":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±—é–¥–∂–µ—Ç:")
        return EDIT_BUDGET
    elif choice == "cancel_edit":
        return await send_preview(update, context)

async def edit_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_storage[update.effective_chat.id]['photo'] = update.message.photo[-1].file_id
    await update.message.reply_text("–§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    return await send_preview(update, context)

async def edit_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_storage[update.effective_chat.id]['text'] = update.message.text
    await update.message.reply_text("–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω.")
    return await send_preview(update, context)

async def edit_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_storage[update.effective_chat.id]['link'] = update.message.text
    await update.message.reply_text("–°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    return await send_preview(update, context)

async def edit_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_storage[update.effective_chat.id]['budget'] = update.message.text
    await update.message.reply_text("–ë—é–¥–∂–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.")
    return await send_preview(update, context)

async def admin_approve_or_reject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action, user_id_str = query.data.split("_")
    user_id = int(user_id_str)
    data = user_data_storage.get(user_id)

    if not data:
        await query.edit_message_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
        return

    if action == "approve":
        caption = f"{data['text']}\n\nüîó {data['link']}\nüí∞ –ë—é–¥–∂–µ—Ç: {data['budget']} ‚ÇΩ"
        await context.bot.send_photo(chat_id=channel_id, photo=data['photo'], caption=caption)
        await query.edit_message_text("–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.")
    else:
        await context.bot.send_message(chat_id=user_id, text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        await query.edit_message_text("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

    user_data_storage.pop(user_id, None)

from telegram.ext import Application

app = ApplicationBuilder().token("8180478614:AAGY0UbvZlK-4wF2n4V25h_Wy_rWV1ogm6o").build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        PHOTO: [MessageHandler(filters.PHOTO, handle_photo)],
        TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text)],
        LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_link)],
        BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_budget)],
        PREVIEW: [CallbackQueryHandler(handle_preview_action)],
        EDIT_SELECT: [CallbackQueryHandler(handle_edit_selection)],
        EDIT_PHOTO: [MessageHandler(filters.PHOTO, edit_photo)],
        EDIT_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_text)],
        EDIT_LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_link)],
        EDIT_BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_budget)],
    },
    fallbacks=[]
)

app.add_handler(conv_handler)
app.add_handler(CallbackQueryHandler(admin_approve_or_reject, pattern=r"^(approve|reject)_\d+$"))

app.run_polling()



