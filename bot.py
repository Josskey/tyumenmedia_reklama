import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    CallbackQueryHandler,
    filters,
)
import os
import json

TOKEN = "8180478614:AAGY0UbvZlK-4wF2n4V25h_Wy_rWV1ogm6o"
CHANNEL_ID = "@tyumenmedia"
ADMIN_ID = 987540995

logging.basicConfig(level=logging.INFO)

ADS_FILE = "ads.json"
if not os.path.exists(ADS_FILE):
    with open(ADS_FILE, "w") as f:
        json.dump([], f)

user_sessions = {}
rejection_reasons = {
    "reason1": "‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
    "reason2": "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±—é–¥–∂–µ—Ç",
    "reason3": "‚ùå –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ",
    "reason4": "‚ùå –ù–∞—Ä—É—à–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞"
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì® –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—É—é –∑–∞—è–≤–∫—É", callback_data="begin_form")]
    ])
    await update.message.reply_text(
        "–≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Telegram-–±–æ—Ç TyumenMedia.\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã.\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    message = update.message

    if user_id not in user_sessions or "step" not in user_sessions[user_id]:
        await message.reply_text("–ù–∞–∂–º–∏—Ç–µ /start –∏ –∑–∞—Ç–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏.")
        return

    session = user_sessions[user_id]

    if session.get("step") == "waiting_admin":
        await message.reply_text("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ—à–µ–Ω–∏—è.")
        return

    if session.get("editing"):
        field = session.get("edit_field")
        if field == "photo" and message.photo:
            session["photo_file_id"] = message.photo[-1].file_id
        elif field in ["text", "link", "budget"]:
            session[field] = message.text
        session["editing"] = False
        session["edit_field"] = None
        await message.reply_text("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—â—ë —Ä–∞–∑ –∑–∞—è–≤–∫—É.", reply_markup=preview_keyboard())
        return

    if session["step"] == "photo":
        if message.photo:
            session["photo_file_id"] = message.photo[-1].file_id
            session["step"] = "text"
            await message.reply_text("üìù –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
        else:
            await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    elif session["step"] == "text":
        session["text"] = message.text
        session["step"] = "link"
        await message.reply_text("üîó –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É.")
    elif session["step"] == "link":
        session["link"] = message.text
        session["step"] = "budget"
        await message.reply_text("üí∞ –ò –Ω–∞–∫–æ–Ω–µ—Ü ‚Äî –±—é–¥–∂–µ—Ç.")
    elif session["step"] == "budget":
        session["budget"] = message.text
        session["step"] = "preview"
        await send_preview(update, context, user_id)

async def send_preview(update, context, user_id):
    session = user_sessions[user_id]
    preview_text = f"üìå <b>–†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç</b>\n\n{session['text']}\n\nüîó {session['link']}\nüí∏ –ë—é–¥–∂–µ—Ç: {session['budget']}"
    keyboard = preview_keyboard()
    await update.message.reply_photo(photo=session["photo_file_id"], caption=preview_text, parse_mode="HTML", reply_markup=keyboard)

def preview_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send"),
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit"),
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="cancel")
        ]
    ])

def edit_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üì∑ –§–æ—Ç–æ", callback_data="edit_photo"),
            InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç", callback_data="edit_text")
        ],
        [
            InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∞", callback_data="edit_link"),
            InlineKeyboardButton("üí∞ –ë—é–¥–∂–µ—Ç", callback_data="edit_budget")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def rejection_keyboard(user_id):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(text, callback_data=f"reason|{key}|{user_id}")]
        for key, text in rejection_reasons.items()
    ])

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if data == "begin_form":
        user_sessions[user_id] = {"step": "photo"}
        await context.bot.send_message(
            chat_id=user_id,
            text="–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n1. –§–æ—Ç–æ\n2. –¢–µ–∫—Å—Ç\n3. –°—Å—ã–ª–∫—É\n4. –ë—é–¥–∂–µ—Ç\n‚Äî –∏ —è —Å–æ–∑–¥–∞–º –ø–æ—Å—Ç –∏ –ø–µ—Ä–µ–¥–∞–º –∞–¥–º–∏–Ω—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é."
        )
        return

    if data == "send":
        session = user_sessions.get(user_id, {})
        if all(k in session for k in ["photo_file_id", "text", "link", "budget"]):
            caption = f"üìå <b>–†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç</b>\n\n{session['text']}\n\nüîó {session['link']}\nüí∏ –ë—é–¥–∂–µ—Ç: {session['budget']}"
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve|{user_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_menu|{user_id}")
                ]
            ])
            await context.bot.send_photo(chat_id=ADMIN_ID, photo=session["photo_file_id"], caption=caption, parse_mode="HTML", reply_markup=keyboard)
            await query.edit_message_caption(caption=caption + "\n\n‚è≥ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É.")
            await context.bot.send_message(chat_id=user_id, text="‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.")
            session["step"] = "waiting_admin"
    elif data == "cancel":
        user_sessions[user_id] = {}
        await query.edit_message_caption(caption="‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    elif data == "edit":
        await query.edit_message_reply_markup(reply_markup=edit_keyboard())
    elif data.startswith("edit_"):
        field = data.split("_")[1]
        user_sessions[user_id]["editing"] = True
        user_sessions[user_id]["edit_field"] = field
        await context.bot.send_message(chat_id=user_id, text=f"‚úèÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è: {field.upper()}")
    elif data == "back":
        await query.edit_message_reply_markup(reply_markup=preview_keyboard())
    elif data.startswith("approve"):
        _, target_id = data.split("|")
        target_id = int(target_id)
        msg = query.message
        photo = msg.photo[-1].file_id
        caption = msg.caption
        await context.bot.send_photo(chat_id=CHANNEL_ID, photo=photo, caption=caption, parse_mode="HTML")
        await query.edit_message_caption(caption=caption + "\n\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
        await context.bot.send_message(chat_id=target_id, text="‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.")
        user_sessions[target_id] = {}
    elif data.startswith("reject_menu"):
        _, target_id = data.split("|")
        await query.edit_message_reply_markup(reply_markup=rejection_keyboard(target_id))
    elif data.startswith("reason"):
        _, reason_key, target_id = data.split("|")
        target_id = int(target_id)
        reason_text = rejection_reasons.get(reason_key, "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        await context.bot.send_message(chat_id=target_id, text=f"{reason_text}\n
n–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        await query.edit_message_caption(caption=query.message.caption + f"\n\n{reason_text}")
        user_sessions[target_id] = {}

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO | (filters.TEXT & ~filters.COMMAND), handle_message))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.run_polling()

if __name__ == "__main__":
    main()







