import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (ApplicationBuilder, CommandHandler, MessageHandler, filters,
                          ConversationHandler, CallbackContext, CallbackQueryHandler)
import os

TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 987540995))
CHANNEL_ID = os.getenv("CHANNEL_ID", "@tyumenmedia")

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
PHOTO, TEXT, LINK, BUDGET, CONFIRM = range(5)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –∑–∞—è–≤–æ–∫
user_data_store = {}

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è –≤–∞—à–µ–π —Ä–µ–∫–ª–∞–º—ã. üì∑")
    return PHOTO

async def handle_photo(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    photo = update.message.photo[-1].file_id
    user_data_store[user_id] = {'photo': photo}
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ ‚úçÔ∏è")
    return TEXT

async def handle_text(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    user_data_store[user_id]['text'] = update.message.text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —Å–∞–π—Ç –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É üåê")
    return LINK

async def handle_link(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    user_data_store[user_id]['link'] = update.message.text
    await update.message.reply_text("–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ ‚Äî —É–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç —Ä–µ–∫–ª–∞–º—ã üí∞")
    return BUDGET

async def handle_budget(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    user_data_store[user_id]['budget'] = update.message.text

    data = user_data_store[user_id]
    caption = f"{data['text']}\n\nüîó {data['link']}\nüí∏ –ë—é–¥–∂–µ—Ç: {data['budget']}"
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send"),
         InlineKeyboardButton("üîÑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit"),
         InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data="delete")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_photo(photo=data['photo'], caption=caption, reply_markup=reply_markup)
    return CONFIRM

async def confirm_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = user_data_store.get(user_id)

    if query.data == "send":
        caption = f"{data['text']}\n\nüîó {data['link']}\nüí∏ –ë—é–¥–∂–µ—Ç: {data['budget']}"
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve|{user_id}"),
             InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject|{user_id}")]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_photo(chat_id=ADMIN_ID, photo=data['photo'], caption=caption, reply_markup=markup)
        await query.edit_message_caption(caption="–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é ‚úÖ")
        return ConversationHandler.END

    elif query.data == "edit":
        await query.edit_message_caption(caption="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ.")
        return PHOTO

    elif query.data == "delete":
        user_data_store.pop(user_id, None)
        await query.edit_message_caption(caption="–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞ ‚ùå")
        return ConversationHandler.END

async def moderation_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    action, user_id = query.data.split("|")
    user_id = int(user_id)
    data = user_data_store.get(user_id)

    if not data:
        await query.edit_message_caption("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
        return

    if action == "approve":
        caption = f"{data['text']}\n\nüîó {data['link']}"
        await context.bot.send_photo(chat_id=CHANNEL_ID, photo=data['photo'], caption=caption)
        await query.edit_message_caption("‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.")
        user_data_store.pop(user_id, None)
    elif action == "reject":
        await query.edit_message_caption("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        user_data_store.pop(user_id, None)

async def cancel(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    user_data_store.pop(user_id, None)
    await update.message.reply_text("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

if __name__ == '__main__':
    from telegram.ext import Application
    import asyncio

    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            PHOTO: [MessageHandler(filters.PHOTO, handle_photo)],
            TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text)],
            LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_link)],
            BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_budget)],
            CONFIRM: [CallbackQueryHandler(confirm_handler)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(moderation_callback, pattern="^(approve|reject)\\|"))

    app.run_polling()

