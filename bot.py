import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputMediaPhoto
from telegram.ext import (ApplicationBuilder, CallbackQueryHandler, CommandHandler,
                          ContextTypes, ConversationHandler, MessageHandler, filters)

import os
import json

TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 987540995))
CHANNEL_ID = os.getenv("CHANNEL_ID", "@tyumenmedia")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
PHOTO, TEXT, LINK, BUDGET, CONFIRM = range(5)
EDIT_CHOICE, EDIT_PHOTO, EDIT_TEXT, EDIT_LINK, EDIT_BUDGET = range(5, 10)

user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üì¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞")
    return PHOTO

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_chat.id] = {
        "photo": update.message.photo[-1].file_id
    }
    await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞")
    return TEXT

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_chat.id]["text"] = update.message.text
    await update.message.reply_text("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
    return LINK

async def handle_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_chat.id]["link"] = update.message.text
    await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ –±—é–¥–∂–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
    return BUDGET

async def handle_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_chat.id]["budget"] = update.message.text
    return await preview(update, context)

async def preview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    data = user_data[chat_id]
    caption = f"{data['text']}\n\nüîó {data['link']}"
    if data.get("budget"):
        caption += f"\nüí∞ –ë—é–¥–∂–µ—Ç: {data['budget']}"

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send"),
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit"),
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="delete")
        ]
    ]
    await context.bot.send_photo(chat_id=chat_id, photo=data["photo"], caption=caption, reply_markup=InlineKeyboardMarkup(keyboard))
    return CONFIRM

async def handle_decision(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat.id

    if query.data == "send":
        data = user_data[chat_id]
        caption = f"{data['text']}\n\nüîó {data['link']}"
        if data.get("budget"):
            caption += f"\nüí∞ –ë—é–¥–∂–µ—Ç: {data['budget']}"
        await context.bot.send_photo(chat_id=ADMIN_ID, photo=data['photo'], caption=caption)
        await query.edit_message_caption("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
        return ConversationHandler.END

    elif query.data == "edit":
        keyboard = [
            [InlineKeyboardButton("üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_photo")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_text")],
            [InlineKeyboardButton("üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="edit_link")],
            [InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç", callback_data="edit_budget")],
            [
                InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_edit"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_edit")
            ]
        ]
        await query.edit_message_caption("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=InlineKeyboardMarkup(keyboard))
        return EDIT_CHOICE

    elif query.data == "delete":
        await query.edit_message_caption("‚ùå –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
        user_data.pop(chat_id, None)
        return ConversationHandler.END

async def edit_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat.id

    if query.data == "edit_photo":
        await context.bot.send_message(chat_id, "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ")
        return EDIT_PHOTO
    elif query.data == "edit_text":
        await context.bot.send_message(chat_id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç")
        return EDIT_TEXT
    elif query.data == "edit_link":
        await context.bot.send_message(chat_id, "üîó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É")
        return EDIT_LINK
    elif query.data == "edit_budget":
        await context.bot.send_message(chat_id, "üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±—é–¥–∂–µ—Ç")
        return EDIT_BUDGET
    elif query.data == "save_edit":
        return await preview(update, context)
    elif query.data == "cancel_edit":
        await context.bot.send_message(chat_id, "üîô –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return await preview(update, context)

async def update_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_chat.id]["photo"] = update.message.photo[-1].file_id
    await update.message.reply_text("‚úÖ –§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    return await preview(update, context)

async def update_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_chat.id]["text"] = update.message.text
    await update.message.reply_text("‚úÖ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω")
    return await preview(update, context)

async def update_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_chat.id]["link"] = update.message.text
    await update.message.reply_text("‚úÖ –°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    return await preview(update, context)

async def update_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_chat.id]["budget"] = update.message.text
    await update.message.reply_text("‚úÖ –ë—é–¥–∂–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω")
    return await preview(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    user_data.pop(update.effective_chat.id, None)
    return ConversationHandler.END

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            PHOTO: [MessageHandler(filters.PHOTO, handle_photo)],
            TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text)],
            LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_link)],
            BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_budget)],
            CONFIRM: [CallbackQueryHandler(handle_decision)],
            EDIT_CHOICE: [CallbackQueryHandler(edit_choice)],
            EDIT_PHOTO: [MessageHandler(filters.PHOTO, update_photo)],
            EDIT_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, update_text)],
            EDIT_LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, update_link)],
            EDIT_BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, update_budget)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(conv)
    app.run_polling()


