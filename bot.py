import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    CallbackQueryHandler,
)
import os
import json

TOKEN = "8180478614:AAGY0UbvZlK-4wF2n4V25h_Wy_rWV1ogm6o"
CHANNEL_ID = "@tyumenmedia"
ADMIN_ID = 987540995

logging.basicConfig(level=logging.INFO)

ADS_FILE = "ads.json"
if not os.path.exists(ADS_FILE):
    with open(ADS_FILE, "w") as f:
        json.dump([], f)

user_sessions = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ:",
    )
    await show_ad_form(update, context)

async def show_ad_form(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üì∑ –§–æ—Ç–æ", callback_data="edit|photo")],
        [InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç", callback_data="edit|text")],
        [InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∞", callback_data="edit|link")],
        [InlineKeyboardButton("üí∞ –ë—é–¥–∂–µ—Ç", callback_data="edit|budget")],
        [
            InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="submit"),
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="delete")
        ]
    ]
    await update.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    message = update.message

    session = user_sessions.setdefault(user_id, {})
    step = session.get("step")

    if step == "photo" and message.photo:
        session["photo_file_id"] = message.photo[-1].file_id
        await message.reply_text("–§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")
    elif step == "text" and message.text:
        session["text"] = message.text
        await message.reply_text("–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ")
    elif step == "link" and message.text:
        session["link"] = message.text
        await message.reply_text("–°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ‚úÖ")
    elif step == "budget" and message.text:
        session["budget"] = message.text
        await message.reply_text("–ë—é–¥–∂–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ")
    else:
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.")

    session["step"] = None
    await show_ad_form(update, context)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    data = query.data
    session = user_sessions.setdefault(user_id, {})

    if data.startswith("edit"):
        _, field = data.split("|")
        session["step"] = field
        await query.message.reply_text(f"‚úçÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è: {field.upper()}.")

    elif data == "submit":
        if not all(session.get(k) for k in ("photo_file_id", "text", "link")):
            await query.message.reply_text("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º —Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫—É.")
            return

        post_preview = f"üìå <b>–†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç</b>\n\n{session['text']}\n\nüîó {session['link']}\nüí∏ –ë—é–¥–∂–µ—Ç: {session.get('budget', '–Ω–µ —É–∫–∞–∑–∞–Ω')}"
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve|{user_id}"),
             InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject|{user_id}")]
        ])

        await context.bot.send_photo(
            chat_id=ADMIN_ID,
            photo=session['photo_file_id'],
            caption=post_preview,
            parse_mode="HTML",
            reply_markup=keyboard
        )

        await query.message.reply_text("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É ‚úÖ")
        session.clear()

    elif data == "delete":
        session.clear()
        await query.message.reply_text("–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞ üóë")

    elif data.startswith("approve") or data.startswith("reject"):
        action, uid = data.split("|")
        uid = int(uid)
        target_session = user_sessions.get(uid, {})
        caption = query.message.caption
        photo = query.message.photo[-1].file_id if query.message.photo else None

        if action == "approve" and photo:
            await context.bot.send_photo(chat_id=CHANNEL_ID, photo=photo, caption=caption, parse_mode="HTML")
            await query.edit_message_caption(caption=caption + "\n\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
        elif action == "reject":
            await query.edit_message_caption(caption=caption + "\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")

        user_sessions.pop(uid, None)


def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO | filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.run_polling()


if __name__ == "__main__":
    main()






