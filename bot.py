import logging
from telegram import Update, InputMediaPhoto, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    CallbackQueryHandler,
)
import os
import json

TOKEN = "8180478614:AAGY0UbvZlK-4wF2n4V25h_Wy_rWV1ogm6o"
CHANNEL_ID = "@tyumenmedia"
ADMIN_ID = 987540995

logging.basicConfig(level=logging.INFO)

ADS_FILE = "ads.json"
if not os.path.exists(ADS_FILE):
    with open(ADS_FILE, "w") as f:
        json.dump([], f)

user_sessions = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n1. –§–æ—Ç–æ\n2. –¢–µ–∫—Å—Ç\n3. –°—Å—ã–ª–∫—É\n4. –ë—é–¥–∂–µ—Ç\n‚Äî –∏ —è —Å–æ–∑–¥–∞–º –ø–æ—Å—Ç –∏ –ø–µ—Ä–µ–¥–∞–º –∞–¥–º–∏–Ω—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é."
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    message = update.message

    if user_id not in user_sessions:
        user_sessions[user_id] = {"step": "photo"}

    session = user_sessions[user_id]

    if session["step"] == "photo":
        if message.photo:
            session["photo_file_id"] = message.photo[-1].file_id
            session["step"] = "text"
            await message.reply_text("üìù –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
        else:
            await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

    elif session["step"] == "text":
        session["text"] = message.text
        session["step"] = "link"
        await message.reply_text("üîó –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É.")

    elif session["step"] == "link":
        session["link"] = message.text
        session["step"] = "budget"
        await message.reply_text("üí∞ –ò –Ω–∞–∫–æ–Ω–µ—Ü ‚Äî –±—é–¥–∂–µ—Ç.")

    elif session["step"] == "budget":
        session["budget"] = message.text
        await show_preview(update, context, session)

    elif session["step"] == "edit_photo":
        if message.photo:
            session["photo_file_id"] = message.photo[-1].file_id
            await message.reply_text("‚úÖ –§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
            await show_preview(update, context, session)
        else:
            await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

    elif session["step"] == "edit_text":
        session["text"] = message.text
        await message.reply_text("‚úÖ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.")
        await show_preview(update, context, session)

    elif session["step"] == "edit_link":
        session["link"] = message.text
        await message.reply_text("‚úÖ –°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        await show_preview(update, context, session)

    elif session["step"] == "edit_budget":
        session["budget"] = message.text
        await message.reply_text("‚úÖ –ë—é–¥–∂–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.")
        await show_preview(update, context, session)

async def show_preview(update: Update, context: ContextTypes.DEFAULT_TYPE, session):
    post_preview = f"üìå <b>–†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç</b>\n\n{session['text']}\n\nüîó {session['link']}\nüí∏ –ë—é–¥–∂–µ—Ç: {session['budget']}"
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"submit|{update.message.from_user.id}"),
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit|{update.message.from_user.id}"),
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete|{update.message.from_user.id}")
        ]
    ])
    await update.message.reply_photo(photo=session['photo_file_id'], caption=post_preview, parse_mode="HTML", reply_markup=keyboard)
    session["step"] = "preview"

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data.split("|")
    action = data[0]
    user_id = int(data[1])
    session = user_sessions.get(user_id, {})

    if action == "submit":
        post_preview = f"üìå <b>–†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç</b>\n\n{session['text']}\n\nüîó {session['link']}\nüí∏ –ë—é–¥–∂–µ—Ç: {session['budget']}"
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve|{user_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject|{user_id}")
            ]
        ])
        await context.bot.send_photo(chat_id=ADMIN_ID, photo=session['photo_file_id'], caption=post_preview, parse_mode="HTML", reply_markup=keyboard)
        await query.edit_message_caption(caption="‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.")

    elif action == "edit":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì∑ –§–æ—Ç–æ", callback_data=f"edit_photo|{user_id}")],
            [InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç", callback_data=f"edit_text|{user_id}")],
            [InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∞", callback_data=f"edit_link|{user_id}")],
            [InlineKeyboardButton("üí∞ –ë—é–¥–∂–µ—Ç", callback_data=f"edit_budget|{user_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back|{user_id}")]
        ])
        await query.edit_message_reply_markup(reply_markup=keyboard)

    elif action.startswith("edit_"):
        field = action.split("_")[1]
        session["step"] = f"edit_{field}"
        await context.bot.send_message(chat_id=user_id, text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è: {field}")

    elif action == "back":
        await show_preview(update, context, session)

    elif action == "delete":
        user_sessions[user_id] = {}
        await query.edit_message_caption(caption="‚ùå –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")

    elif action == "approve":
        message = query.message
        await context.bot.send_photo(chat_id=CHANNEL_ID, photo=message.photo[-1].file_id, caption=message.caption, parse_mode="HTML")
        await query.edit_message_caption(caption=message.caption + "\n\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")

    elif action == "reject":
        await query.edit_message_caption(caption=query.message.caption + "\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO | filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.run_polling()

if __name__ == "__main__":
    main()













