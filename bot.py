# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–¥–∞: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Telegram-–±–æ—Ç–∞ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã
# –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –ø–æ—Å–ª–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞

updated_code = """
import logging
from telegram import Update, InputMediaPhoto, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    CallbackQueryHandler,
)
import os
import json

TOKEN = "8180478614:AAGY0UbvZlK-4wF2n4V25h_Wy_rWV1ogm6o"
CHANNEL_ID = "@tyumenmedia"
ADMIN_ID = 987540995

logging.basicConfig(level=logging.INFO)

user_sessions = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n1. –§–æ—Ç–æ\n2. –¢–µ–∫—Å—Ç\n3. –°—Å—ã–ª–∫—É\n4. –ë—é–¥–∂–µ—Ç\n‚Äî –∏ —è —Å–æ–∑–¥–∞–º –ø–æ—Å—Ç –∏ –ø–µ—Ä–µ–¥–∞–º –∞–¥–º–∏–Ω—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é."
    )
    user_sessions[update.message.from_user.id] = {"step": "photo"}

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    message = update.message
    session = user_sessions.setdefault(user_id, {})

    if "editing" in session:
        field = session["editing"]
        session[field] = message.text if field != "photo" else message.photo[-1].file_id
        session.pop("editing")
        await send_preview(update, context, session)
        return

    step = session.get("step", "photo")

    if step == "photo":
        if message.photo:
            session["photo"] = message.photo[-1].file_id
            session["step"] = "text"
            await message.reply_text("üìù –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
        else:
            await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
    elif step == "text":
        session["text"] = message.text
        session["step"] = "link"
        await message.reply_text("üîó –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É.")
    elif step == "link":
        session["link"] = message.text
        session["step"] = "budget"
        await message.reply_text("üí∞ –£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç.")
    elif step == "budget":
        session["budget"] = message.text
        await send_preview(update, context, session)

async def send_preview(update: Update, context: ContextTypes.DEFAULT_TYPE, session: dict):
    user_id = update.message.from_user.id if update.message else update.callback_query.from_user.id
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"send|{user_id}"),
         InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_menu|{user_id}")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete|{user_id}")]
    ])
    caption = f"<b>üìå –†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç</b>\n\n{session['text']}\n\nüîó {session['link']}\nüí∏ –ë—é–¥–∂–µ—Ç: {session['budget']}"
    await context.bot.send_photo(chat_id=user_id, photo=session["photo"], caption=caption, parse_mode="HTML", reply_markup=keyboard)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action, user_id_str = query.data.split("|")
    user_id = int(user_id_str)
    session = user_sessions.get(user_id)

    if action == "send":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve|{user_id}"),
             InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject|{user_id}")]
        ])
        caption = f"<b>üìå –†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç</b>\n\n{session['text']}\n\nüîó {session['link']}\nüí∏ –ë—é–¥–∂–µ—Ç: {session['budget']}"
        await context.bot.send_photo(chat_id=ADMIN_ID, photo=session["photo"], caption=caption, parse_mode="HTML", reply_markup=keyboard)
        await context.bot.send_message(chat_id=user_id, text="‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É.")
        user_sessions[user_id] = {}
    elif action == "delete":
        user_sessions[user_id] = {}
        await context.bot.send_message(chat_id=user_id, text="‚ùå –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
    elif action == "edit_menu":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì∑ –§–æ—Ç–æ", callback_data=f"edit_field|photo"),
             InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç", callback_data=f"edit_field|text")],
            [InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∞", callback_data=f"edit_field|link"),
             InlineKeyboardButton("üí∞ –ë—é–¥–∂–µ—Ç", callback_data=f"edit_field|budget")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"cancel_edit|{user_id}")]
        ])
        await context.bot.send_message(chat_id=user_id, text="–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=keyboard)
    elif action.startswith("edit_field"):
        field = action.split("|")[1]
        user_sessions[user_id]["editing"] = field
        prompt = {
            "photo": "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ",
            "text": "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç",
            "link": "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É",
            "budget": "üí∞ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –±—é–¥–∂–µ—Ç"
        }
        await context.bot.send_message(chat_id=user_id, text=prompt[field])
    elif action == "cancel_edit":
        await send_preview(update, context, session)
    elif action == "approve":
        await context.bot.send_photo(chat_id=CHANNEL_ID, photo=update.effective_message.photo[-1].file_id,
                                     caption=update.effective_message.caption, parse_mode="HTML")
        await query.edit_message_caption(caption=update.effective_message.caption + "\n\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
    elif action == "reject":
        await query.edit_message_caption(caption=update.effective_message.caption + "\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO | filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.run_polling()

if __name__ == "__main__":
    main()
"""

updated_code[:500]  # –ø–æ–∫–∞–∂–µ–º –Ω–∞—á–∞–ª–æ –∫–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏









